"use strict";(self.webpackChunkfrontboard=self.webpackChunkfrontboard||[]).push([[353],{4353:e=>{e.exports="<template>\n  <Selector\n    class=\"c-resource-search\"\n    optionValue=\"id\"\n    optionText=\"name\"\n    :filterable=\"true\"\n    :value=\"value\"\n    :options=\"resources\"\n    :loading=\"loading\"\n    :useObject=\"useObject\"\n    @input=\"selectOption\"\n    @open=\"onOpen\"\n    @filter=\"onFilter\"\n  >\n    <template #value=\"{option: resource}\">\n      <ResourceLabel v-if=\"resource\" :resource=\"resource\" typed/>\n    </template>\n    <template #option=\"{option: resource}\">\n      <ResourceLabel v-if=\"resource\" :resource=\"resource\" typed/>\n    </template>\n  </Selector>\n</template>\n\n<script>\n\nimport Scheme from 'services/Scheme'\nimport APP from 'services/APP'\nimport Selector from 'components/selector/Selector'\nimport ResourceLabel from 'components/ResourceLabel'\nimport Axios from 'axios'\n\nconst API = Axios.create({\n  baseURL: '/',\n  withCredentials: true\n})\n\nAPI.interceptors.request.use(config => {\n  config.params = config.params || {}\n  config.headers['X-CSRF-Token'] = document.querySelector('meta[name=csrf-token]')?.getAttribute('content')\n  config.headers.Accept = 'application/json, text/javascript, */*; q=0.01'\n  config.headers['X-Requested-With'] = 'XMLHttpRequest'\n  return config\n})\n\nexport default {\n  name: 'ResourceSearch',\n  components: {\n    Selector,\n    ResourceLabel\n  },\n  props: {\n    value: Object,\n    useObject: Boolean\n  },\n  data: () => ({\n    API,\n    resources: [],\n    loading: undefined,\n    searchText: ''\n  }),\n  methods: {\n    onOpen() {\n      window.ResourceSearch = this\n      this.getOptions()\n    },\n    onFilter(searchText) {\n      this.searchText = searchText\n      this.getOptions()\n    },\n    // WIP\n    getOptions() {\n      if (APP.isOffline) {\n        this.resources = Scheme.searchIn(this.searchText, [\n          ...Scheme.models.Some.cache,\n          ...Scheme.models.Some2.cache\n        ])\n      } else {\n        throw new Error('Not implemented')\n      }\n      /*\n\n      this.loading = true\n      API.get('', {params: {q: this.searchText}}).then(response => {\n        const resources = response.data.map(resourceData => {\n          const Class = Scheme.models[resourceData.class_name]\n          if (Class) {\n            return new Class(resourceData.id).patch(resourceData)\n          }\n          return false\n        }).filter(resource => resource)\n        this.resources = resources\n      }).finally(() => {\n        this.loading = false\n      })\n      */\n    },\n    selectOption(value) {\n      this.$emit('input', value)\n    }\n  }\n}\n<\/script>\n"}}]);