"use strict";(self.webpackChunkfrontboard=self.webpackChunkfrontboard||[]).push([[903],{6903:e=>{e.exports='<template>\n  <div class="c-scheme" tabindex="0" :class="entity.tone ? \'t-\' + entity.tone.name : \'\'">\n    <div class="c-scheme__header c-scheme__header--reverse">\n      \x3c!--\n      <div class="c-scheme__location">\n        <SchemeBreadcrumb/>\n      </div>\n      --\x3e\n      \x3c!--\n      <div class="c-scheme__title">\n        <h2><SchemeChip :entity="entity" /></h2>\n      </div>\n      --\x3e\n      <div class="c-scheme__toolbar">\n        <button type="button" class="c-action t-primary v-semi" :class="form.getMutation() ? \'t-warning v-dance\' : \'\'" :disabled="!form.getMutation()" @click="save"><i class="fi fi-rr-disk"></i>Save</button>\n        <button type="button" class="c-action t-secondary" @click="$emit(\'close\')"><i class="fi fi-rr-cross"></i></button>\n      </div>\n      <menu class="c-scheme__tabs c-tabs">\n        <slot name="listview"></slot>\n        \x3c!-- <li><button type="button" class="c-action t-secondary" @click="$emit(\'close\')"><i class="fi fi-rr-cross"></i></button></li> --\x3e\n        <span class="c-chip">{{ schemeClass.name.toSpaces().capitalize() }}</span>\n        <li><h2 class="c-action" @click="currentCrudTab = undefined" :active="!currentCrudTab">{{ entity }}</h2></li>\n        <li @click="currentCrudTab = \'example\'"><button type="button" class="c-action v-semi" :active="currentCrudTab === \'example\'">Example tab</button></li>\n        <li v-for="field in crudFields" @click="currentCrudTab = field">\n          <button type="button" class="c-action" :active="currentCrudTab === field">{{ field.label }}</button>\n        </li>\n        \x3c!-- <li><button type="button" class="c-action" @click="loadMetadata">Metadata</button></li> --\x3e\n      </menu>\n    </div>\n    <div class="c-tabs-content">\n      <div v-if="currentCrudTab === \'example\'">Example content</div>\n      <SchemeList v-else-if="currentCrudTab" :value="form[currentCrudTab.key]" @input="saveList(field, $event)" :field="fields[currentCrudTab.key]" :entity="entity" :schemeClass="currentCrudTab.class[0]"/>\n      <form v-else-if="!currentCrudTab && form" ref="form" class="c-scheme__detail" @keydown.enter.stop.prevent="save">\n        <draggable tag="fieldset" class="c-scheme__fieldset c-dragable c-fieldset" draggable=".c-draggable__item" handle=".c-draggable__handler" :list="fields">\n          <template v-for="field in fields">\n            <template v-if="!field.hidden(form)">\n              <SchemeList v-if="field.crud && field.class" :value="form[field.key]" @input="saveList(field, $event)" :field="field" :entity="entity" :schemeClass="field.class[0]" class="c-draggable__item"/>\n              <div v-else class="c-draggable__item c-fieldset__item" :class="{\'c-scheme__invent\': field.isInvent}">\n                <label class="c-draggable__handler">{{ field.label }}{{ field.isInvent ? \'*\' : \'\' }}</label>\n                <SchemeField :form="form" :field="field"/>\n              </div>\n            </template>\n          </template>\n        </draggable>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Scheme from \'services/Scheme\'\nimport draggable from \'vuedraggable\'\n\nexport default {\n  name: \'SchemeDetail\',\n\n  components: {\n    draggable\n  },\n\n  props: {\n    schemeClass: { type: Function, required: true },\n    indexed: { type: Boolean },\n    id: { type: String },\n    use: { type: Object }\n  },\n\n  data: () => ({\n    entity: undefined,\n    fields: undefined,\n    form: undefined,\n    currentCrudTab: undefined\n    // parentDetails: []\n  }),\n\n  created() {\n    // console.warn(\'SchemeDetail created\', this)\n    window.SchemeDetail = this\n    const Class = this.schemeClass\n    this.fields = Class.fields\n\n    if (this.use) {\n      this.entity = this.use\n      // this.form = Class.config.freeze ? this.entity.getFormObject() : this.entity\n      this.form = this.entity.getFormObject()\n    } else {\n      this.entity = new Class(this.id)\n      this.entity.get().then(response => {\n        // this.form = Class.config.freeze ? this.entity.getFormObject() : this.entity\n        this.form = this.entity.getFormObject()\n      })\n    }\n\n    /*\n    const parentDetails = []\n    let parent = this\n    while (parent) {\n      // console.log(\'parentDetail\', parent)\n      if (parent.$options && parent.$options.name === \'SchemeDetail\') {\n        parentDetails.push(parent)\n      }\n      parent = parent.$parent\n    }\n\n    this.parentDetails = parentDetails.filter(detail => detail.entity !== detail.form)\n    */\n  },\n\n  mounted() {\n    this.$el.addEventListener(\'keydown\', this.onKeydown)\n    if (this.$refs.form) this.$refs.form.querySelector(\'input[type="text"]\')?.focus()\n  },\n\n  beforeDestroy() {\n    this.$el.removeEventListener(\'keydown\', this.onKeydown)\n  },\n\n  computed: {\n    tabFields() {\n      return this.fields.filter(field => !field.tab)\n    },\n    crudFields() {\n      return this.fields.filter(field => field.tab && field.crud)\n    }\n  },\n\n  methods: {\n    onKeydown (event) {\n      if (event.key === \'s\' && event.metaKey) {\n        event.preventDefault()\n        event.stopPropagation()\n        this.save()\n      } else if (event.key === \'ArrowRight\' && event.metaKey && event.ctrlKey) {\n        event.preventDefault()\n        event.stopPropagation()\n        // event.stopImmediatePropagation()\n        this.nextTab()\n      } else if (event.key === \'ArrowLeft\' && event.metaKey && event.ctrlKey) {\n        event.preventDefault()\n        event.stopPropagation()\n        // event.stopImmediatePropagation()\n        this.nextTab(true)\n      }\n    },\n    nextTab(reverse) {\n      console.log(\'next tab\')\n      const tabs = [undefined, ...this.crudFields]\n      if (this.currentCrudTab) {\n        const currentIndex = tabs.indexOf(this.currentCrudTab)\n        const nextIndex = (tabs.length + currentIndex + (reverse ? -1 : 1)) % tabs.length\n        this.currentCrudTab = tabs[nextIndex]\n      } else {\n        const nextIndex = reverse ? tabs.length - 1 : 0\n        this.currentCrudTab = tabs[nextIndex]\n      }\n    },\n    async saveList(field, event) {\n      console.log(\'save list\', field, event)\n      this.form[field.key] = event\n      return await this.save()\n    },\n    async save() {\n      console.info(\'Â· save form:\', this.form)\n      // this.parentDetails.forEach(detail => detail.form.save())\n\n      if (this.indexed) {\n        await this.form.save()\n        this.$emit(\'save\', this.entity)\n      } else {\n        this.form.apply()\n      }\n\n      // this.form.save()\n    }\n  }\n}\n<\/script>\n'}}]);