"use strict";(self.webpackChunkfrontboard=self.webpackChunkfrontboard||[]).push([[704],{8704:n=>{n.exports='<template>\n  <div class="c-scheme-wrp" :class="{\'c-scheme-wrp--mini\': palette.miniVariation && (!currentEntity || palette.inlineExpand)}" tabindex="0">\n    <div v-show="!(currentEntity && !inlineExpand) || showBoth" class="c-scheme">\x3c!-- review todo v-show v-show="!currentEntity" --\x3e\n      <div class="c-scheme__header">\n        \x3c!-- <SchemeBreadcrumb/> --\x3e\n        <div class="c-scheme__title">\n          <slot name="title"><h2>{{ (field ? field.label : schemeClass.plural).toSpaces().capitalize() }}</h2><span v-if="!indexed" class="c-chip">metadata</span></slot>\n        </div>\n        <div class="c-scheme__toolbar">\n          \x3c!--\n          <label><input type="checkbox" class="c-checkbox">Bulk actions</label>\n          <label><input type="checkbox" class="c-checkbox">Side expand</label>\n          --\x3e\n          \x3c!-- <input type="checkbox" v-model="palette.miniVariation" class="c-checkbox"> --\x3e\n          \x3c!-- <input type="checkbox" v-model="inlineExpand" class="c-checkbox"> --\x3e\n          \x3c!-- <Selector v-model="selectedCols" useObject multiple optionText="label" optionValue="key" :options="seletableCols" @input="refresh" class="c-scheme__columns-selector"/><! -- REVIEW refresh call --\x3e\n          <button type="button" class="c-action t-primary v-semi" @click="addEntity"><i class="fi fi-rr-plus"></i>Add row</button>\n          <slot name="actions"></slot>\n          \x3c!--\n          <span v-if="totalPages > 1" class="c-scheme__pagination">\n            <Selector v-model="page" :options="pages" @input="loadPage"/>\n            <span>{{ page }} / {{ totalPages || 1 }}</span>\n          </span>\n          --\x3e\n        </div>\n      </div>\n      <div class="c-scheme__list">\n        <Datagrid\n          ref="datagrid"\n          :cols="schemeClass.fields"\n          :colsPrepend="colsPrepend"\n          :colsAppend="colsAppend"\n          :records="currentPage"\n          :draftLine="currentEntity === newEntity || (inlineEditForm && inlineEditForm.$parent === newEntity) ? newEntity : undefined"\n          :expand="inlineExpand ? currentEntity : undefined"\n          :selectable="selectable"\n          :sortable="sortable"\n        >\x3c!-- selectable @keyup.enter="onEnter" @keyup.delete="onDelete" ---\x3e\n          <template #record="{record: entity, cols, selected}">\n            <DatagridRecord\n              :record="entity"\n              :cols="cols"\n              :selectable="selectable"\n              :sortable="sortable"\n              :selected="selected"\n              :key="entity.uid"\n              :class="{ \'c-scheme__formrow\': inlineEditForm && inlineEditForm.$parent === entity}"\n              :active="currentEntity === entity"\n              @focusin.native="focusRow(entity)"\n              @dblclick.native.stop.prevent="editEntity(entity)"\n              @keydown.native.meta.83.stop.prevent="save"\n              @keydown.native.enter.stop.prevent="save"\n              @keydown.native.meta.enter.stop.prevent.exact="editEntity(entity)"\n              @keydown.native.esc.stop.prevent="blurRow"\n            >\n              <template #cell="{ col: field }">\n                <div v-if="inlineEditForm && inlineEditForm.$parent === entity && !field.crud && (!field.multiple || field.class)" class="c-scheme__field">\n                  <SchemeField :form="inlineEditForm" :field="field"/>\n                </div>\n                <div class="c-scheme__multiple" v-else-if="Array.isArray(entity[field.key])">\n                  <template v-for="valueItem in entity[field.key]">\n                    <SchemeChip v-if="Scheme.isScheme(valueItem)" readOnly :entity="valueItem"/>\n                    <span v-else>{{ valueItem }}</span>\n                  </template>\n                </div>\n                <SchemeChip v-else-if="Scheme.isScheme(entity[field.key])" readOnly :entity="entity[field.key]"/>\n                <div v-else>{{ field.format(entity[field.key]) }}</div>\n              </template>\n              <template #cell.actions>\n                <button\n                  type="button"\n                  v-if="currentEntity === entity || (inlineEditForm && inlineEditForm.$parent === entity)"\n                  class="c-action t-primary v-semi"\n                  :class="entity.getFormObject().getMutation() ? \'t-warning v-dance\' : \'\'"\n                  :disabled="!entity.getFormObject().getMutation()"\n                  @click="save">\n                  <span class="fi fi-rr-disk"></span>\n                </button>\n                <button v-if="currentEntity === entity || (inlineEditForm && inlineEditForm.$parent === entity)" type="button" class="c-action t-error v-semi" @mousedown="removeEntity(entity)"><span class="fi fi-rr-trash"></span></button>\n                <button v-if="currentEntity === entity" type="button" class="c-action t-secondary v-semi" @mousedown="showList"><i class="fi fi-rr-eye-crossed"></i></button>\n                <button v-else type="button" class="c-action t-primary v-semi" @mousedown="editEntity(entity)"><i class="fi fi-rr-eye"></i></button>\n              </template>\n            </DatagridRecord>\n          </template>\n          <template #expand>\n            <SchemeDetail v-if="currentEntity" :schemeClass="currentEntity.Class" :use="currentEntity" :key="currentEntity.uid" @close="showList" @save="onSave" :indexed="indexed"/>\n          </template>\n        </Datagrid>\n      </div>\n    </div>\n    <SchemeDetail v-if="currentEntity && !inlineExpand" :schemeClass="currentEntity.Class" :use="currentEntity" :key="currentEntity.uid" @close="showList" @save="onSave" :indexed="indexed">\n      <template #listview v-if="indexed">\n        <li>\n          <button type="button" @click="showBoth = !showBoth" class="c-action t-secondary">\n            <i v-if="showBoth" class="fi fi-rr-angle-double-left"></i>\n            <i v-else class="fi fi-rr-angle-double-right"></i>\n          </button>\n        </li>\n      </template>\n    </SchemeDetail>\n  </div>\n</template>\n\n<script>\n\nimport Vue from \'vue\'\nimport Scheme from \'services/Scheme\'\nimport Field from \'models/palette/Field\'\nimport Selector from \'components/selector/Selector\'\nimport SchemeChip from \'components/scheme/SchemeChip\'\nimport DatagridRecord from \'components/DatagridRecord\'\nimport palette from \'services/palette\'\n\nexport default {\n  name: \'SchemeList\',\n\n  components: {\n    SchemeChip,\n    Selector,\n    DatagridRecord\n  },\n\n  props: {\n    schemeClass: { type: Function, required: true },\n    value: { type: Array },\n    field: { type: Object }\n    // entity: { type: Object }\n  },\n\n  data: () => ({\n    palette,\n    Scheme,\n    currentPage: undefined,\n    currentEntity: undefined,\n    newEntity: undefined,\n    pageSize: 20,\n    fields: undefined,\n    defaultColSize: 180,\n    page: 1,\n    mouseStatus: {},\n    scroll: {},\n    totalEntries: undefined,\n    seletableCols: [],\n    selectedCols: [],\n    inlineEditForm: undefined,\n    miniVariation: true,\n    showBoth: true,\n    selectable: false,\n    sortable: true\n  }),\n\n  watch: {\n    value (value, prevValue) {\n      console.log(\'list value watcher\')\n      this.loadPage()\n    }\n  },\n\n  created() {\n    window.SchemeList = this\n    this.seletableCols = this.schemeClass.fields.filter(field => !field.multiple)\n    this.selectedCols = [...this.seletableCols]\n  },\n\n  mounted() {\n    this.$el.addEventListener(\'keydown\', this.onKeydown)\n    document.addEventListener(\'focusin\', this.onFocusOut)\n    this.loadPage()\n    this.showList()\n  },\n\n  beforeDestroy() {\n    this.$el.removeEventListener(\'keydown\', this.onKeydown)\n    document.removeEventListener(\'focusin\', this.onFocusOut)\n  },\n\n  computed: {\n\n    indexed () {\n      return !this.field || !this.field.metadata\n    },\n\n    inlineExpand () {\n      return this.field && this.palette.inlineExpand\n    },\n\n    /*\n    isExpand() {\n      console.log(\'isExpand\', this.prop && this.entity.Class.fields.find(field => field.key === this.prop).expand)\n      return this.prop && this.entity.Class.fields.find(field => field.key === this.prop).expand\n    },\n    */\n    list() {\n      return this.value\n    },\n    /*\n    currentPath() {\n      return this.entity ? [this.entity.Class.endpoint, this.entity.id, this.prop.toSnakeCase()].pathJoin() : this.schemeClass.endpoint\n    },\n    */\n    totalPages() {\n      if (!this.totalEntries) return 1\n      return Math.ceil(this.totalEntries / this.pageSize)\n    },\n    pages() {\n      return [...Array(this.totalPages).keys()].map(page => ({text: String(page + 1), value: page + 1}))\n    },\n    colsPrepend() {\n      return [\n        new Field({key: \'$\', label: \'\', size: 40, sticky: \'left\', fixed: true})\n        // new Field({key: \'uid\', size: 80, sticky: \'left\'})\n      ]\n    },\n    colsAppend() {\n      return [\n        new Field({key: \'actions\', size: 120, sticky: \'right\', fixed: true})\n      ]\n    }\n    /* *\n    gridCols() {\n      // return this.schemeClass.fields\n      const selectedCols = [\n        new Field({key: \'bulk\', size: 60, sticky: \'left\', fixed: true})\n        // new Field({key: \'id\', size: 80, sticky: \'left\'})\n      ]\n      selectedCols.push(...this.selectedCols)\n      selectedCols.push(new Field({key: \'actions\', size: 90, sticky: \'right\', fixed: true}))\n      return selectedCols\n    }\n    /* */\n  },\n\n  methods: {\n    onFocusOut(event) {\n      // console.log(\'focusout\')\n\n      if (!this.$refs.datagrid.$el.contains(document.activeElement)) {\n        this.blurRow()\n      }\n    },\n    onKeydown (event) {\n      if (event.key === \'Enter\' && event.metaKey) {\n        event.preventDefault()\n        event.stopPropagation()\n        this.addEntity()\n      }\n      if (event.key === \'Escape\') {\n        event.preventDefault()\n        event.stopPropagation()\n        this.showList()\n      }\n    },\n    showList() {\n      this.currentEntity = undefined\n      this.$nextTick().then(() => {\n        if (this.$refs.datagrid) this.$refs.datagrid.$el.focus()\n      })\n    },\n    editEntity(entity) {\n      // console.log(\'go to edit\', entity)\n      if (entity) {\n        this.focusRow(entity)\n        this.currentEntity = entity\n      } else {\n        this.showList()\n      }\n    },\n    blurRow() {\n      // console.log(\'blur\')\n      this.inlineEditForm = undefined\n    },\n    focusRow(entity) {\n      // console.log(\'focus\', entity)\n      if (this.inlineEditForm && this.inlineEditForm.$parent === entity) return\n      if (this.currentEntity) this.currentEntity = entity\n      this.inlineEditForm = entity.getFormObject()\n    },\n    refresh() {\n      // console.log(\'refresh\')\n    },\n    save() {\n      // console.log(\'SchemeList save\', this.field)\n      if (this.indexed) {\n        this.inlineEditForm.save()\n      } else {\n        this.inlineEditForm.apply()\n      }\n\n      this.onSave(this.inlineEditForm.$parent)\n    },\n    onSave(entity) {\n      console.log(\'on save\', {entity, indexed: this.indexed})\n      if (entity === this.newEntity) {\n        this.newEntity = undefined\n        console.log(\'push!!\')\n        if (this.inlineEditForm && entity === this.inlineEditForm.$parent) {\n          console.log(\'----- add new row after\')\n          this.addEntity()\n        }\n        this.list.push(entity)\n        this.loadPage()\n      }\n      console.log(\'check list\', this.list)\n      this.$emit(\'input\', this.list)\n    },\n    addEntity() {\n      const Class = this.schemeClass\n      this.newEntity = new Class()\n      if (!this.inlineExpand) this.currentEntity = this.newEntity\n      this.inlineEditForm = this.newEntity.getFormObject()\n\n      // this.$emit(\'input\', this.list)\n      // this.loadPage()\n    },\n    async removeEntity(entity) {\n      await entity.delete()\n      if (this.list) {\n        const index = this.list.indexOf(entity)\n        console.log(\'remove index\', this, entity)\n        if (index >= 0) {\n          this.list.splice(index, 1)\n          this.$emit(\'input\', [...this.list])\n          this.loadPage()\n        }\n      }\n    },\n    loadPage() {\n      // console.warn(\'load page\')\n      const Class = this.schemeClass\n      if (this.list) {\n        const filteredList = this.list\n        this.totalEntries = filteredList.length\n        this.currentPage = filteredList\n        // this.$nextTick().then(this.refresh)\n      } else {\n        throw new Error(\'Not implemented\')\n        // this.currentPage = Class.cache\n\n        // this.totalEntries = this.currentPage.length\n        // this.$nextTick().then(this.refresh)\n        /*\n        const params = {pagination: true, per_page: this.pageSize, page: this.page}\n        return Scheme.fetchEntities(this.currentPath, params).then(entries => {\n          console.log(\'currentPage\', entries, entries.totalEntries)\n          this.totalEntries = entries.totalEntries\n          this.currentPage = entries\n          this.$nextTick().then(this.refresh)\n        })\n        */\n      }\n      // this.$forceUpdate()\n    }\n  }\n}\n<\/script>\n\n<style lang="scss">\n\n.--ds { // TODO: Move to CSS file\n  .c-scheme {\n    // background: var(--color-white);\n    flex-shrink: 1;\n    overflow: hidden;\n  }\n  .c-scheme-wrp {\n    display: flex;\n    flex-grow: 1;\n\n    flex-shrink: 1;\n    // overflow: auto;\n    // overflow: visible;\n    overflow: hidden;\n    // border-bottom: 1px solid var(--color--pale-1);\n    > .c-scheme {\n      display: flex;\n      flex-direction: column;\n    }\n    > .c-scheme:first-child:last-child {\n      flex-grow: 1;\n      width: auto;\n    }\n    > .c-scheme:first-child:not(:last-child) {\n      width: 350px;\n      border-right: 1px solid var(--color--pale-1);\n      flex-shrink: 0;\n    }\n    > .c-scheme:last-child:not(:first-child) {\n      flex-grow: 1;\n      // border-left: 2px solid var(--color--pale-1);\n      // border-bottom: 1px solid var(--color--pale-1);\n      display: flex;\n      flex-direction: column;\n      flex-shrink: 1;\n      overflow: auto;\n    }\n  }\n\n  .c-scheme__list {\n    // padding: var(--spacing-l);\n    // display: flex;\n    // justify-content: center;\n    background-color: var(--color--light-3);\n    flex-grow: 1;\n    display: flex;\n\n    flex-shrink: 1;\n    overflow: hidden;\n    margin: -1px -1px 0;\n\n    // Redesign\n    background-color: var(--color--light-2);\n    flex-grow: 1;\n    display: flex;\n    flex-shrink: 1;\n    overflow: hidden;\n    margin: -1px -2px 0px -1px;\n    // border-right: 1px solid var(--color--pale-1);\n\n    .c-datagrid {\n      // margin: -1px -1px 1px;\n      // max-width: calc(100% + 2px);\n\n      // width: 0;\n      // flex-grow: 1;\n      // height: 100%;\n      // display: block;\n      // max-height: none;\n\n      // margin: -1px -1px -1px;\n      // max-width: calc(100% + 2px);\n      // width: 0;\n      // flex-grow: 1;\n      // display: block;\n      // max-height: calc(100% + 2px);\n\n      // margin: 0 -1px 0px;\n      max-width: calc(100% + 2px);\n      width: 0;\n      // height: 0;\n      flex-grow: 1;\n      // display: block;\n      max-height: calc(100% + 2px);\n    }\n  }\n\n  .c-scheme__pagination {\n  }\n\n  .c-scheme__columns-selector {\n    max-width: 430px;\n  }\n\n  .c-scheme__header {\n    /*\n    display: flex;\n    justify-content: space-between;\n    // align-items: flex-start;\n    padding: var(--spacing-l);\n    border-bottom: 1px solid var(--color--pale-1);\n    // margin: 0 0 var(--spacing-xl) 0;\n    // border-radius: var(--border-radius);\n\n    // gap: var(--spacing-xxl);\n    flex-wrap: wrap;\n    // min-height: 90px;\n\n    align-items: center;\n    align-content: flex-start;\n    */\n\n    display: flex;\n    padding: var(--spacing-l);\n    border-bottom: 1px solid var(--color--pale-1);\n    flex-wrap: wrap;\n    align-items: center;\n    align-content: center;\n    gap: var(--spacing-xl);\n    flex-direction: row;\n    // justify-content: flex-end;\n    justify-content: flex-start;\n  }\n\n  .c-scheme__header--reverse {\n    flex-direction: row-reverse;\n  }\n\n  .c-scheme__title {\n    cursor: default;\n    // flex-shrink: 0;\n    display: flex;\n    gap: var(--spacing-l);\n    align-items: center; // review\n    flex-wrap: wrap;\n    &:empty {\n      display: none;\n    }\n    a {\n      cursor: pointer;\n    }\n    h2 {\n      padding: 0;\n    }\n    .c-selector {\n      width: 300px;\n    }\n  }\n\n  .c-scheme__toolbar {\n    /*\n    display: flex;\n    flex-grow: 1;\n    justify-content: flex-end;\n    gap: var(--spacing-m);\n    align-items: flex-start;\n    // order: 2;\n    */\n\n    display: flex;\n    flex-grow: 1;\n    justify-content: flex-end;\n    gap: var(--spacing-m);\n    // align-items: flex-start;\n    align-items: center;\n  }\n\n  .c-scheme__tabs {\n    // width: 100%;\n    border-bottom-style: none;\n    margin-bottom: calc(-1 * var(--spacing-l));\n    padding: 0;\n    align-self: end;\n    // order: 1;\n    justify-content: flex-start;\n\n    &>li:first-child {\n      h2 {\n        margin: 0;\n      }\n      // font-size: 20px;\n    }\n  }\n\n  .c-scheme-chip {\n    display: flex;\n    align-items: flex-start;\n  }\n\n  .c-scheme-chip__text:not(:last-child) { // .c-scheme-chip {\n    margin-right: 0;\n  }\n\n  .c-scheme-chip__type {\n    margin-left: 0;\n    font-size: 0.5em;\n  }\n  .c-scheme__field {\n    display: flex;\n    // margin: -3px -7px;\n    flex-grow: 1;\n\n    // align-self: normal;\n\n    // margin: calc(var(--spacing-xs)* -1 + 1px) calc(var(--spacing-m)* -1 + 1px);\n\n    .c-input {\n      width: 100%;\n    }\n  }\n  .c-scheme__multiple {\n    display: flex;\n  }\n  .c-scheme__location {\n    display: flex;\n    width: 100%;\n  }\n  .c-scheme__invent {\n    pointer-events: none;\n    opacity: 0.3;\n  }\n\n  /* */\n  .c-scheme__fieldset > .c-scheme-wrp.c-scheme-wrp--mini {\n    // padding: var(--spacing-xl);\n    border-style: none;\n    margin: 0;\n    // max-width: 450px;\n    &> .c-scheme {\n      // border-color: var(--color-white) !important;\n      &:first-child {\n        &> .c-scheme__header {\n          padding: var(--spacing-m) var(--spacing-m) var(--spacing-m) 0;\n        }\n      }\n      &:first-child:last-child {\n        // max-width: 450px;\n      }\n      &:last-child:not(:first-child) {\n        border-bottom-style: none;\n      }\n      > .c-scheme__list {\n        background-color: var(--color-white);\n        margin: 0;\n        >.c-datagrid {\n          --table-border: 1px solid transparent;\n          --td-border: 1px solid transparent;\n          &> table {\n            &>tbody, &>thead, &>tfoot {\n              &>tr {\n                &>th, &>td {\n                  background-color: var(--color-white);\n                  background-image: none;\n                  border-color: transparent;\n                  &>.c-datagrid__expand-content {\n                    border-style: solid;\n                    margin-top: -1px;\n                    border-radius: var(--border-radius);\n                  }\n                  /*\n                  &:last-child {\n                    visibility: hidden;\n                  }\n                  */\n                }\n                /*\n                &.c-scheme__formrow {\n                  td:last-child {\n                    visibility: visible;\n                  }\n                }\n                */\n                /* */\n                &:focus-within, &.c-scheme__formrow, &[active] {\n                  &>th, &>td {\n                    background-color: var(--color--light-3);\n                    &:first-child {\n                      border-radius: var(--border-radius) 0 0 var(--border-radius);\n                    }\n                    &:last-child {\n                      border-radius: 0 var(--border-radius) var(--border-radius) 0;\n                    }\n                  }\n                }\n                /* */\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  /* */\n}\n\n</style>\n'}}]);