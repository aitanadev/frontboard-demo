"use strict";(self.webpackChunkfrontboard=self.webpackChunkfrontboard||[]).push([[479],{4479:e=>{e.exports='<template>\n  <div\n    ref="emergentHook"\n    class="c-selector-option"\n    @mouseenter="onMouseEnter"\n  >\n    <span\n      ref="option"\n      class="c-selector-option__handler c-option c-action"\n      :class="{\'c-selector-option--danger\': danger}"\n      tabindex="0"\n      :active="active"\n      @click.stop.prevent="select"\n      @keydown.space.stop.prevent="select"\n      @keydown.enter.stop.prevent="select"\n      @mouseenter="activate"\n      @mouseleave="deactivate"\n      @focus="activate"\n      @blur="deactivate"\n    >\n      <span class="c-selector-option__prepend">\n        <div\n          v-if="multiple"\n          class="c-checkbox"\n          :checked="selected"\n          :indeterminate="options && !selection.complete"\n        ></div>\n      </span>\n      <span class="c-selector-option__contents"><slot></slot></span>\n      <span class="c-selector-option__append">\n        <span v-if="multiple && options" class="c-selector-option__counter c-chip">{{ selection.count }}/{{ selection.total }}</span>\n        <span v-if="options" class="c-selector-option__arrow fi fi-rr-angle-small-right"></span>\n      </span>\n    </span>\n    <div v-if="this.$slots.options" ref="emergent" class="c-emergent">\n      <slot name="options"></slot>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport Selector from \'./Selector\'\nimport Emergent from \'services/Emergent\'\n\nexport default {\n  name: \'SelectorOption\',\n\n  props: {\n    danger: Boolean,\n    multiple: Boolean,\n    selected: Boolean,\n    selection: Object,\n    options: [Boolean, Array]\n  },\n\n  data: () => ({\n    active: false,\n    selector: undefined,\n    emergent: new Emergent()\n  }),\n\n  created () {\n    this.selector = this.closestComponent(Selector)\n  },\n\n  mounted () {\n    this.emergent.sync({\n      element: this.$refs.emergent,\n      hook: this.$refs.emergentHook,\n      config: {\n        spacing: -6,\n        aside: true\n      }\n    })\n  },\n\n  beforeDestroy () {\n    this.emergent.close()\n  },\n\n  methods: {\n    onMouseEnter () {\n      if (!this.selector.keyboardNavigated) {\n        this.open()\n      }\n    },\n    activate () {\n      this.open()\n      this.active = true\n      this.$refs.option.focus()\n    },\n    deactivate () {\n      this.active = false\n    },\n    open () {\n      if (!this.emergent.opened && this.$slots.options) {\n        this.emergent.open()\n      }\n    },\n    close () {\n      if (this.emergent.opened && this.$slots.options) {\n        this.emergent.close()\n      }\n    },\n    select (event) {\n      this.$emit(\'select:option\', event)\n    }\n  }\n}\n<\/script>\n'}}]);