"use strict";(self.webpackChunkfrontboard=self.webpackChunkfrontboard||[]).push([[825],{8825:n=>{n.exports='<template>\n  <div ref="emergentHook" class="c-date-field">\n    <div class="c-field" :hint="currentDate.toString()">\n      <label v-if="label">{{ label }}</label>\n      <label><span class="fi fi-rs-calendar"></span></label>\n      <input\n        type="number"\n        class="c-input c-date-field__day"\n        v-model="day"\n        autocomplete="off"\n        min="0"\n        max="32"\n        maxlength="2"\n        step="1"\n        @focus="focus"\n        @input="onChange"\n      /><input\n        type="number"\n        class="c-input c-date-field__month"\n        v-model="month"\n        autocomplete="off"\n        min="0"\n        max="13"\n        maxlength="2"\n        step="1"\n        @focus="focus"\n        @input="onChange"\n      /><input\n        type="number"\n        class="c-input c-date-field__year"\n        v-model="year"\n        autocomplete="off"\n        min="0"\n        maxlength="4"\n        step="1"\n        @focus="focus"\n        @input="onChange"\n      />\n      \x3c!-- <input type="checkbox" v-model="mondays"> ---\x3e\n      <label><span class="fi fi-rs-clock"></span></label>\n      <input\n        type="number"\n        class="c-input c-date-field__hours"\n        v-model="hours"\n        autocomplete="off"\n        min="-1"\n        max="24"\n        maxlength="2"\n        step="1"\n        @focus="focus"\n        @input="onChange"\n      />\n      <input\n        type="number"\n        class="c-input c-date-field__minutes"\n        v-model="minutes"\n        autocomplete="off"\n        min="-1"\n        max="60"\n        maxlength="2"\n        step="1"\n        @focus="focus"\n        @input="onChange"\n      />\n    </div>\n    <div ref="emergent" class="c-emergent c-calendar" v-if="calendar">\n      <table v-if="emergent.opened">\n        <thead>\n          <tr>\n            <td colspan="8">{{ calendar.selector.toLocaleString(\'default\', { month: \'long\' }).capitalize() }} {{ year }}</td>\n          </tr>\n          <tr>\n            <th>WÂº</th>\n            <th v-for="weekDay in calendar.weekDays" :key="weekDay">{{ [\'Do\', \'Mo\', \'Tu\', \'We\', \'Th\', \'Fr\', \'Sa\'][weekDay] }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for="week in calendar" :key="week.weekNumber">\n            <th>{{ week.weekNumber }}</th>\n            <td\n              v-for="weekDay in week.days"\n              :key="weekDay.toString()"\n              :active="weekDay.getUTCDate() === day && (weekDay.getUTCMonth() + 1) === month"\n              :class="{\'--weekend\': weekDay.getUTCDay() === 0 || weekDay.getUTCDay() === 6}"\n            >\n              <button type="button" class="c-action">{{ weekDay.getUTCDate() }}</button>\n            </td>\n          </tr>\n        </tbody>\n        <tfoot>\n          <td colspan="8"><div>{{ currentDate }}</div><div>{{ lapse }}</div></td>\n        </tfoot>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Emergent from \'services/Emergent\'\n\nexport default {\n  name: \'DateField\',\n\n  props: {\n    value: { type: Date },\n    label: { type: String }\n  },\n\n  data: () => ({\n    currentDate: undefined,\n    mondays: false,\n    lapse: 0,\n    emergent: new Emergent()\n  }),\n\n  created() {\n    window.DateField = this\n    this.currentDate = this.value || new Date()\n    this.lapseInterval = setInterval(this.setLapse, 1000)\n  },\n\n  mounted() {\n    const self = this\n    this.emergent.sync({\n      element: this.$refs.emergent,\n      hook: this.$refs.emergentHook,\n      config: {\n        spacing: 2,\n        inheritWidth: false\n        // automaticMouseHandling: true\n      },\n      onOpen () {\n        self.$emit(\'open\')\n      },\n      onClose () {\n        self.$emit(\'close\')\n      }\n    })\n  },\n\n  beforeDestroy() {\n    clearInterval(this.lapseInterval)\n  },\n  computed: {\n    day: {\n      get() {\n        return this.currentDate.getUTCDate()\n      },\n      set(value) {\n        if (value !== \'\') this.currentDate.setUTCDate(value)\n      }\n    },\n    month: {\n      get() {\n        return this.currentDate.getUTCMonth() + 1\n      },\n      set(value) {\n        if (value !== \'\') this.currentDate.setUTCMonth(value - 1)\n      }\n    },\n    year: {\n      get() {\n        return this.currentDate.getUTCFullYear()\n      },\n      set(value) {\n        if (value !== \'\') this.currentDate.setUTCFullYear(value)\n      }\n    },\n    hours: {\n      get() {\n        return this.currentDate.getUTCHours()\n      },\n      set(value) {\n        if (value !== \'\') this.currentDate.setUTCHours(value)\n      }\n    },\n    minutes: {\n      get() {\n        return this.currentDate.getUTCMinutes()\n      },\n      set(value) {\n        if (value !== \'\') this.currentDate.setUTCMinutes(value)\n      }\n    },\n    calendar() {\n      return Date.getCalendar(this.year, this.month - 1, this.mondays ? 1 : 0)\n    }\n  },\n\n  methods: {\n    setLapse() {\n      const diff = Math.abs(Date.now() - this.currentDate.getTime())\n      const factors = {\n        days: Math.floor(diff / 1000 / 60 / 60 / 24), // TODO: add months and years grouping\n        hours: Math.floor((diff / (1000 * 60 * 60)) % 24),\n        minutes: Math.floor((diff / (1000 * 60)) % 60),\n        seconds: Math.floor((diff / 1000) % 60)\n      }\n\n      const textPieces = []\n      if (factors.days) textPieces.push(factors.days + \' days\')\n      if (factors.hours) textPieces.push(factors.hours + \' hours\')\n      if (factors.minutes) textPieces.push(factors.minutes + \' minutes\')\n      if (factors.seconds) textPieces.push(factors.seconds + \' seconds\')\n\n      this.lapse = textPieces.join(\', \')\n    },\n    focus() {\n      this.emergent.open()\n    },\n    onChange() {\n      const {day, month, year, hours, minutes} = this\n      console.log(\'date text:\', {day, month, year, hours, minutes})\n      this.currentDate = new Date(this.currentDate.getTime())\n      if (this.value) this.$emit(\'input\', new Date(this.currentDate.getTime()))\n      this.$forceUpdate()\n    }\n  }\n}\n<\/script>\n'}}]);