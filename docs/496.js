"use strict";(self.webpackChunkfrontboard=self.webpackChunkfrontboard||[]).push([[496],{496:o=>{o.exports='<template>\n  <div class="c-selector-options v-scrolled">\n    <div class="c-selector-options__group c-selector-options__prepend">\n      <div class="c-selector-options__group-items c-menu">\n        <slot name="options.prepend"></slot>\n      </div>\n    </div>\n    <div v-if="!filteredOptions.length" class="c-selector-options__empty">\n      <slot name="options.empty"></slot>\n    </div>\n    <div v-else class="c-selector-options__group" v-for="(group, groupIndex) in filteredOptions">\n      <div\n        v-if="grouped"\n        class="c-selector-options__group-name"\n        :key="\'[\' + groupIndex + \']\'"\n      >{{ group.text }}</div>\n      <div class="c-selector-options__group-items c-menu">\n        <SelectorOption\n          ref="option"\n          v-for="(option, optionIndex) in group.options"\n          :key="\'[\' + groupIndex + \'][\' + optionIndex + \']\'"\n          :multiple="selector.multiple"\n          :selected="selector.isSelected(option)"\n          :options="selector.multilevel && option.options"\n          :selection="selector.getSelection(option)"\n          @select:option.stop="selector.selectOption(option)"\n          @keydown.right.native.stop.prevent="selector.focusInto"\n          @keydown.left.native.stop.prevent="selector.focusBack"\n          :class="(option && option.Class && option.Class.name === \'Color\') ? \'t-\' + option.name : \'\'"\n        >\n          <slot name="option" v-bind="{option}"></slot>\n          <template #options v-if="selector.multilevel && option.options">\n            <SelectorOptions ref="options" :options="option.options" :grouped="option.grouped">\n              <template #option="{option}"><slot name="option" v-bind="{option}"></slot></template>\n            </SelectorOptions>\n          </template>\n        </SelectorOption>\n      </div>\n    </div>\n    <div class="c-selector-options__group c-selector-options__append">\n      <div class="c-selector-options__group-items c-menu">\n        <slot name="options.append"></slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport Selector from \'./Selector\'\nimport SelectorOption from \'./SelectorOption\'\n\nexport default {\n  name: \'SelectorOptions\',\n\n  components: {\n    SelectorOption\n  },\n\n  props: {\n    options: { type: Array },\n    grouped: { type: Boolean }\n  },\n\n  data: () => ({\n    selector: undefined\n  }),\n\n  created () {\n    this.selector = this.closestComponent(Selector)\n  },\n\n  computed: {\n    filteredOptions () {\n      if (this.selector.filterable && this.selector.filterText.length > 0) {\n        if (this.grouped) {\n          const groups = []\n          this.options.forEach(group => {\n            const options = this.applyFilter(group.options)\n            if (options.length > 0) {\n              groups.push({ ...group, options })\n            }\n          })\n          return groups\n        } else {\n          return [{ options: this.applyFilter(this.options) }]\n        }\n      } else {\n        return this.grouped ? this.options : [{ options: this.options }]\n      }\n    }\n  },\n\n  methods: {\n    applyFilter (options) {\n      if (this.selector.filter) {\n        return options.filter(option => this.selector.filter(option, this.selector.filterText))\n      } else {\n        return options.filter(option => this.selector.getOptionText(option).toLowerCase().includes(this.selector.filterText.toLowerCase()))\n      }\n    }\n  }\n}\n<\/script>\n'}}]);